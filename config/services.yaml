# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    upload_directory: '%kernel.project_dir%/public/allfiles'
    upload_blog_directory: '%kernel.project_dir%/public/uploads'
    app.path.article_images: /uploads
    payment_params:
        merchant_id: '014295303911111'    # CODE DE TEST
        #merchant_id: '083897291700010'    # IN PROD
        merchant_country: fr
        currency_code: '978'
        #pathfile: '/var/www/app/src/Utils/pathfile'
        pathfile: '/var/www/html/front/projectCG/src/Utils/pathfileDev'  # IN ENV DEV
        #pathfile: '/var/www/html/cgofficiel/src/Utils/pathfile'  # IN ENV PROD
    payment_binary:
        #request: '/var/www/app/src/Utils/bin/request'
        #response: '/var/www/app/src/Utils/bin/response'
        request: '/var/www/html/front/projectCG/src/Utils/bin/request'  # IN ENV DEV
        response: '/var/www/html/front/projectCG/src/Utils/bin/response'  # IN ENV DEV
        #request: '/var/www/html/cgofficiel/src/Utils/bin/request'  # IN ENV PROD
        #response: '/var/www/html/cgofficiel/src/Utils/bin/response'  # IN ENV PROD
    admin_mail: ['rapaelec@gmail.com', 'technique@cgofficiel.fr', 'rapaelec@gmail.com', 'nirinarochelmiandrisoa@gmail.com', 'rochel2fnclm@gmail.com']
    admin_doc_validator: ["rapaelec@gmail.com", "test@gmail.com", "rakoto@gmail.com"]

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    acme_user.register_listener:
        class: App\EventListener\RegisterListener
        arguments: ['@router']
        tags:
            - { name: kernel.event_subscriber }
    Symfony\Component\HttpFoundation\Session\Session:
        public: true
    app.authentication_success_handler:
        class: App\EventListener\LoginAuthenticationHandler
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }
    App\Services\Tms\TmsClient:
        arguments: ['%env(resolve:TMS_ENDPOINT)%', '%env(resolve:TMS_CODE_TMS)%', '%env(resolve:TMS_LOGIN)%', '%env(resolve:TMS_PASSWORD)%']
    App\EventListener\AnnotationValidator:
        tags:
            - { name: kernel.event_listener, event: kernel.controller, methode: onKernelController}
    App\Admin\CommandeAdmin:
        arguments: [~, App\Entity\Commande, ~]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'TABLEAU DE BORD', label: Estimations }
    App\Admin\DemandeAdmin:
        arguments: [~, App\Entity\Demande, ~]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'TABLEAU DE BORD', label: Panier }
    App\Admin\ConfigurationAdmin:
        arguments: [~, App\Entity\Configuration, ~]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'CONFIGURATION', label: 'Traitement Taxes' }
    App\Admin\TarifPrestationAdmin:
        arguments: [~, App\Entity\TarifsPrestations, ~]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'TARIFS', label: 'Tarif prestation' }
    App\Admin\FactureJournalierAdmin:
        arguments: [~, App\Entity\DailyFacture, App\Controller\ActionAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'FACTURE', label: 'RÃ©capitulatif journalier' }
    App\Admin\UserAdmin:
        arguments: [~, App\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'UTILISATEURS', label: 'Gestion des Utilisateurs' }
    # App\Admin\DeleteCommandeAdmin:
    #     arguments: [~, App\Entity\User,  App\Controller\ActionAdminController]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm,group: 'UTILISATEURS', label: "Gestion des Commandes d'utilisateur" }
    App\Admin\NotificationEmailAdmin:
        arguments: [~, App\Entity\NotificationEmail, ~]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'NOTIFICATION', label: 'Gestions des notifications ' }
    App\Admin\FactureAdmin:
        arguments: [~, App\Entity\Demande, App\Controller\ActionAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'FACTURE', label: 'Factures clients' }
        public: true
    App\Admin\ValidationDossierAdmin:
        arguments: [~, App\Entity\Demande, App\Controller\ActionAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'DOCUMENTS', label: 'Valider et Upload des documents' }
        public: true
    # App\Admin\UploadDossierAdmin:
    #     arguments: [~, App\Entity\Demande, App\Controller\ActionAdminController]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm,group: 'DOCUMENTS', label: 'Upload des documents' }
    #     public: true
    App\Admin\StatisticAdmin:
        arguments: [~, App\Entity\Commande, ~]
        tags:
            - { name: sonata.admin, manager_type: orm,group: 'STATS', label: 'Stat de Commandes' }
        public: true
    App\EventListener\AuthenticationSuccessListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }
    App\EventListener\JWTAuthenticatedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_authenticated, method: onJWTAuthenticated }
    App\EventListener\SendEmailListener:
        public: true
        tags:
            - { name: swiftmailer.default.plugin }
    App\Manager\Mercure\MercureManager:
        public: true
        arguments: ['@mercure.hub.default.publisher']