security:
    encoders:
        App\Entity\User: bcrypt

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: ROLE_ADMIN
        ROLE_CRM: ROLE_CRM
        ROLE_ADMIN_BLOG: ROLE_ADMIN_BLOG

    providers:
        fos_userbundle:
            id: fos_user.user_provider.username_email

    firewalls:
        admin:
            pattern:            /admin(.*)
            form_login:
                provider:       fos_userbundle
                login_path:     admin_login
                use_forward:    false
                check_path:     admin_login
                failure_path:   null
            logout:
                path:           admin_logout
                target:         admin_login
            anonymous:          true
            guard:
                authenticators:
                    - App\Security\Admin\AdminLoginAuthenticator
        api:
            pattern: ^/api/
            stateless: true
            anonymous: true
            provider: fos_userbundle
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        api_main:
            pattern: /authentication_token
            stateless: true
            anonymous: true
            provider: fos_userbundle
            json_login:
                check_path: /authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                login_path: fos_user_security_login 
                check_path: fos_user_security_check
                csrf_token_generator: security.csrf.token_manager
                success_handler: app.authentication_success_handler
                use_referer: true
                # if you are using Symfony < 2.8, use the following config instead:
                # csrf_provider: form.csrf_provider
                default_target_path: compte
            logout:       true
            anonymous:    true

    access_control:
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin_blog/, role: ROLE_ADMIN_BLOG }
        - { path: ^/admin/, role: ROLE_ADMIN }
        # - { path: ^/api/, role: IS_AUTHENTICATED_FULLY }

# security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    # providers:
        # in_memory: { memory: ~ }
    # firewalls:
        # dev:
        #    pattern: ^/(_(profiler|wdt)|css|images|js)/
        #   security: false
        # main:
        #    anonymous: true

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
